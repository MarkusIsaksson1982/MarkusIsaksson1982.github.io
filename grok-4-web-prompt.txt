Implement the integration of a new Swedish language learning module focused on novella writing and analysis into the existing Flask app at "C:\Users\mjisa\dev\app". This builds on the previous reading assignment module by adding writing-focused features.

Key new content from the provided text:
- Explanations of novella elements: undertext (subtext/isbergstekniken), stil (style: pratigt, komiskt, etc.), budskap (message), konflikt (conflict: yttre/inre), tid (time: short span with flashbacks), lösning/avslutning (resolution: surprising, not betraying reader), tempus (tense: preteritum/presens), berättarperspektiv (perspective: third/first person, allvetande), personbeskrivningar (character descriptions: yttre/inre, undertext), miljöbeskrivningar (environment: using senses), dialog (direct/indirect anföring, advances plot/reveals character), inre monolog (internal thoughts).
- Two example novellas: "Nu när du är stilla" by Pär Sablin (2009) – about bullying, regret, told in first person with italics for framing; "Handkraft" by Torgny Lindgren (1972) – about a student losing hands, societal commentary.
- Questions/Exercises: Innehåll (content comprehension), Struktur (structure analysis), Språk (language features), TA REDA PÅ (research novella openings).

Enhancements:
- Extend ReadingAssignment model to WritingAssignment (add fields for elements like conflict, style, examples).
- Teacher features: Upload/input novella content, generate exercises (e.g., auto-create questions on structure/language using NLP).
- Student features: Interactive writing editor with AI suggestions (e.g., highlight undertext, recommend perspectives), strategy selectors for writing (e.g., checkboxes for "use dialog", "add inre monolog"), self-assessment matrix aligned with Swedish curriculum/CEFR (B1 focus on narrative techniques).
- AI integration: Use enhanced TextProcessor for analyzing student writings (e.g., detect tempus, identify konflikt, score undertext depth), provide feedback (e.g., "Add more sensory details to miljöbeskrivningar"), recommend improvements based on examples.
- UI/UX: New templates for writing exercises (rich text editor via CKEditor), progress tracking with visualizations (e.g., word count, element usage pie chart), evaluation using matrix (e.g., "Eleven använder undertext effektivt").
- Scalability/Security: Async processing for AI feedback, role-based access, input validation.
- Testing: Add tests for new features.

Provide full code changes, including updated models.py, text_processor.py, new blueprint /writing, templates, and migration scripts. Ensure compatibility with prior reading module.