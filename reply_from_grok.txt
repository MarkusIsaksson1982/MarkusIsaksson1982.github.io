Instructions for Grok Code Fast 1 in opencode CLI:

Use the following multi-step workflow in opencode CLI with Grok Code Fast 1 to generate, refactor, and improve the codebase for the educational language learning application described in the attached prompt_for_grok.txt. The goal is to address the analysis and improvement suggestions: enhance functionality by integrating real AI/LLMs, improve code quality with better structure and testing, boost user experience with modern UI/UX, and ensure scalability for handling various texts (e.g., book teacher's guides, literature excerpts, or educational materials). Emphasize generalizability so the app can process any text or book content, such as adapting teacher's guides to Gy25 curriculum standards (as in examples like "Tatueraren i Auschwitz" or other books), CEFR-level text modifications for language learners, source criticism generation for arbitrary sources, argument visualization for debates in texts, and exam simulations based on input content.

Run these as sequential commands in opencode CLI, where each step builds on the previous (e.g., via --refine or --build-on flags if available). For each step, generate code snippets, full files, or architectural diagrams as outputs, with explanations. Use Python 3.12, Flask 3.x, and compatible libraries (e.g., no pip installs beyond what's pre-installed like numpy, sympy; simulate LLM calls initially with placeholders, then integrate xAI Grok API where possible). Assume the base paths: main app at /app, källkritik-generator at /kallkritik-generator, and standalone scripts. Output should include diff-style code changes, new files, and tests.

Step 1: Architectural Refactor for Scalability and Generalization
opencode --model grok-code-fast-1 --prompt "Refactor the main Flask app structure in /app to support modular, scalable handling of diverse texts (e.g., PDFs of book teacher's guides, plain text literature). Introduce a central TextProcessor class in tools/text_processor.py that abstracts input parsing (PDFs via PyPDF2 or pdfplumber if available, fallback to text), CEFR analysis, text modification, argument visualization (using networkx for graphs), source criticism, and exam simulation. Make it general: accept parameters like 'curriculum_standard' (e.g., 'Gy25') to adapt content dynamically. Replace SQLite with SQLAlchemy for ORM and easy migration to PostgreSQL. Add config for environment variables. Provide code for new tools/text_processor.py, updates to __init__.py, and a diagram of the new architecture."

Step 2: Integrate Real AI/LLMs for Text Modification and Analysis
opencode --model grok-code-fast-1 --prompt "Update text_modifier.py to replace simulation with real LLM integration using xAI Grok API (or OpenAI as fallback; use environment vars for API keys). Add functions for: (1) CEFR-level adaptation (e.g., simplify text to A1-C2 levels), (2) Gy25 curriculum adaptation (rewrite sections like syfte, centralt innehåll for any input text, generalizing from examples like teacher's guides for books). Make it API-endpoint compatible in Flask. For generality, add a generate_gy25_version function that takes original text/PDF content, book_title, and outputs structured Markdown. Include error handling for API rate limits. Provide updated text_modifier.py code and integration into routes/main.py for student/teacher dashboards."

Step 3: Enhance UI/UX for Dashboards and Tools
opencode --model grok-code-fast-1 --prompt "Improve user experience in templates/ (e.g., student_dashboard.html, teacher_dashboard.html) and routes/. Use Bootstrap 5 for responsive design, add interactive elements like file uploads for PDFs/texts, real-time previews for modified texts, and visualizations (e.g., argument graphs via D3.js or matplotlib embeds). Add a 'Process Book Guide' feature where teachers upload a PDF (e.g., for any book like 'Tatueraren i Auschwitz' or others), select options (Gy25 adapt, CEFR simplify, source crit), and get downloadable outputs. Ensure accessibility (ARIA labels). Update run.py to serve static assets efficiently. Provide sample HTML/Jinja templates and route code changes."

Step 4: Add Robust Testing and Code Quality Improvements
opencode --model grok-code-fast-1 --prompt "Add comprehensive testing using pytest. Create tests/ directory with unit tests for tools/ (e.g., test CEFR analysis accuracy with sample texts), integration tests for routes (e.g., simulate PDF upload and Gy25 generation), and end-to-end tests for dashboards. Enforce code quality: add flake8 config, type hints with mypy, and docstrings. For generality, include test cases for different books/texts (e.g., mock inputs for historical fiction vs. science texts). Refactor any duplicated code in källkritik-generator into the main app as a module. Provide tests/__init__.py, sample test files, and a .github/workflows/ci.yml for CI."

Step 5: Improve Security and Performance Optimizations
opencode --model grok-code-fast-1 --prompt "Enhance security: Implement Flask-Talisman for HTTPS/headers, user auth with Flask-Login (hash passwords with bcrypt), input validation/sanitization to prevent XSS/SQL injection, especially for text uploads. For performance: Add caching with Flask-Caching (Redis if scalable), async tasks with Celery for LLM calls/PDF processing, and database indexing in SQLite/SQLAlchemy. Optimize for scalability: containerize with Docker-compose.yml for deployment. Make features general for high-volume text processing (e.g., batch Gy25 adaptations for multiple books). Provide code changes for config.py, routes/auth.py, and a Dockerfile."

Step 6: Merge and Generalize for Other Texts/Books
opencode --model grok-code-fast-1 --prompt "Integrate all prior steps into a cohesive app. Add a command-line entry in run.py for batch processing (e.g., python run.py generate-gy25 input.pdf output.md --book 'Any Book Title' --options cefr=B1 source-crit=true). Ensure generality: the app should handle non-book texts (e.g., articles, essays) for language learning tasks. Document with README.md including examples for adapting teacher's guides like 'Lararhandledning_Tatueraren_i_Auschwitz.pdf' to Gy25, and extending to other contents. Provide final merged code diffs, updated app structure, and usage examples."