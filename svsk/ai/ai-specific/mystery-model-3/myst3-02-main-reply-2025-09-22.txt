
I'll provide a Python solution using PyMuPDF for PDF text extraction and parsing. The script will identify kunskapskrav sections, categorize them by grade levels, extract key competency descriptors, and generate bridge connections to other subjects based on keyword matching. I'll also include error handling and support for both Swedish and English text extraction.

```python
import fitz  # PyMuPDF
import re
import csv
import json
import configparser
from collections import defaultdict

# Configuration
config = configparser.ConfigParser()
config.read('config.ini')

# Subject bridge mappings
subject_bridges = {
    'Svenska': config['Bridges']['svenska_keywords'].split(','),
    'Historia': config['Bridges']['historia_keywords'].split(','),
    'Samhällskunskap': config['Bridges']['samhallskunskap_keywords'].split(','),
}

def extract_text_from_pdf(pdf_path):
    try:
        doc = fitz.open(pdf_path)
        text = ''
        for page in doc:
            text += page.get_text()
        return text
    except Exception as e:
        print(f"Error extracting text from PDF: {e}")
        return ''

def parse_kunskapskrav(text):
    # Regular expression to match kunskapskrav sections
    pattern = r'Kunskapskrav för godtagbara kunskaper i slutet av årskurs \d+ \((E|C|A)\)(.*?)((?=Kunskapskrav)|$)'
    matches = re.findall(pattern, text, re.DOTALL | re.IGNORECASE)
    
    kunskapskrav_data = defaultdict(list)
    for match in matches:
        grade_level = match[1]
        descriptors = match[2].strip().split('\n')
        kunskapskrav_data[grade_level].extend(descriptors)
    
    return kunskapskrav_data

def generate_bridge_connections(descriptors):
    bridges = defaultdict(list)
    for subject, keywords in subject_bridges.items():
        for descriptor in descriptors:
            for keyword in keywords:
                if keyword.lower() in descriptor.lower():
                    bridges[subject].append(descriptor)
                    break
    return bridges

def output_to_csv(data, filename):
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Grade Level', 'Descriptor', 'Bridge Subject'])
        for grade_level, descriptors in data['kunskapskrav'].items():
            for descriptor in descriptors:
                bridge_subjects = ', '.join(data['bridges'].get(descriptor, []))
                writer.writerow([grade_level, descriptor, bridge_subjects])

def output_to_json(data, filename):
    with open(filename, 'w') as jsonfile:
        json.dump(data, jsonfile, indent=4, ensure_ascii=False)

def output_to_markdown(data, filename):
    with open(filename, 'w') as mdfile:
        mdfile.write('# Kunskapskrav Extraction Results\n\n')
        for grade_level, descriptors in data['kunskapskrav'].items():
            mdfile.write(f'## Grade Level: {grade_level}\n\n')
            for descriptor in descriptors:
                mdfile.write(f'- {descriptor}\n')
                if descriptor in data['bridges']:
                    mdfile.write(f'  - Bridges: {", ".join(data["bridges"][descriptor])}\n')

def main(pdf_path):
    text = extract_text_from_pdf(pdf_path)
    kunskapskrav_data = parse_kunskapskrav(text)
    all_descriptors = [desc for descriptors in kunskapskrav_data.values() for desc in descriptors]
    bridges = generate_bridge_connections(all_descriptors)
    
    # Structure data for output
    output_data = {
        'kunskapskrav': dict(kunskapskrav_data),
        'bridges': {desc: subjects for subject, desc_list in bridges.items() for desc in desc_list},
    }
    
    # Output in multiple formats
    output_to_csv(output_data, 'output.csv')
    output_to_json(output_data, 'output.json')
    output_to_markdown(output_data, 'output.md')

if __name__ == "__main__":
    main('path_to_your_pdf.pdf')
```

This script assumes a basic structure for the Skolverket ARTI syllabi documents. You may need to adjust the regular expression pattern in `parse_kunskapskrav` to better match the actual document structure.

The `config.ini` file should contain the subject bridge mappings, for example:
```ini
[Bridges]
svenska_keywords = läsförståelse,skrivförmåga,kommunikation
historia_keywords = historiskt perspektiv,kritisk granskning,tidsperioder
samhallskunskap_keywords = samhällsstruktur,demokrati,rättigheter
```

Error handling for malformed PDFs is basic and can be improved based on specific needs. The script assumes that the PDF text extraction will work correctly for both Swedish and English text. PyMuPDF should handle Unicode characters correctly.

Please adjust the script and configuration according to your specific requirements and document structures.
