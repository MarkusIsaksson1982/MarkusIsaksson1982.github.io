Konversation med Gemini

Select one of these prompts:

  

  "Design a standalone micro app for ARTI education that focuses on a single task from Level 1 curriculum, such as basic classification or data quality evaluation. The app should be in Python, require minimal dependencies (e.g., pandas for data handling if needed), and include: (1) a clear educational tie-in to ARTI themes like 'vikten av data' or simple problem-solving; (2) interactive input (e.g., user provides statements or a small CSV); (3) output a report with basic stats or classifications, plus discussion prompts for classroom reflection (e.g., 'How could biases in data affect this?'); (4) example usage and extension ideas for students. Ensure the app performs one task exceptionally well without unnecessary features."



  "Collaboratively outline a micro app for ARTI courses that isolates one key skill from the curriculum, such as ethical risk classification or data quality validation. Make it 50% focused on practical computation (e.g., keyword matching for risks or checking CSV for missing/duplicates) and 50% on educational output (e.g., stats report with reflection questions on AI consequences). Use Python or JS, keep it dependency-light, include curriculum references (e.g., Level 1's 'etiska dilemman' or 'datakvalitet'), and provide sample inputs/outputs plus ideas for student discussions on opportunities vs. risks."



  "Create a micro app for ARTI education emphasizing 'vikten av data och datakvalitet' from Level 1, such as a CSV data quality checker that reports missing values, duplicates, and label balance. Use Python with pandas, include command-line usage, a structured report, and classroom info like implications for AI bias. To improve: Add a simple text-based visualization (e.g., asterisk bars for distributions) and one ethical prompt (e.g., 'How might unbalanced data lead to unfair AI outcomes?') to tie into broader curriculum risks."



*"Design a standalone micro app for ARTI education that isolates one task from Level 1 curriculum, such as basic classification or simple data checks. The app should: (1) be coded in Python with minimal dependencies (pandas allowed if handling data); (2) take small interactive input (e.g., user-entered text or a simple CSV); (3) output a clear result plus a reflection question linking to ARTI themes like ‘vikten av data’ or simple AI problem-solving; (4) include example usage and extension ideas for students. Keep it highly focused and lightweight, showing one concept done well, without feature creep."*



*"Collaboratively design a micro app for ARTI courses that blends **practical computation** and **ethical reflection**. The app should: (1) focus on a single skill like data validation (missing values, duplicates) or keyword-based ethical risk detection; (2) output both a technical report (stats, counts, or classifications) and an educational prompt (‘What risks or biases could arise from this data or decision?’); (3) be dependency-light (Python or JavaScript acceptable); (4) tie explicitly to Level 1 ARTI topics like ‘etiska dilemman’ or ‘datakvalitet’; (5) include sample inputs/outputs and discussion starters for classroom use."*



*"Create a micro app for ARTI education emphasizing Level 1’s focus on ‘vikten av data och datakvalitet’. Build a CSV data quality checker that: (1) reports missing values, duplicates, and label balance; (2) uses Python with pandas; (3) outputs a structured text report with both numbers and simple text-based visualizations (e.g., bar-style asterisk counts for distributions); (4) includes at least one ethical discussion question (‘How might unbalanced data lead to unfair AI outcomes?’); (5) provide a command-line usage example so students can run it themselves. Keep the app small, clear, and discussion-oriented."*







Visa tillvägagångssätt
Jag har valt det här alternativet eftersom det är mest specifikt och ger en tydlig plan för en praktisk och pedagogisk app:

"Create a micro app for ARTI education emphasizing Level 1’s focus on ‘vikten av data och datakvalitet’. Build a CSV data quality checker that: (1) reports missing values, duplicates, and label balance; (2) uses Python with pandas; (3) outputs a structured text report with both numbers and simple text-based visualizations (e.g., bar-style asterisk counts for distributions); (4) includes at least one ethical discussion question (‘How might unbalanced data lead to unfair AI outcomes?’); (5) provide a command-line usage example so students can run it themselves. Keep the app small, clear, and discussion-oriented."

Här är filerna för mikro-appen. Vi börjar med en README.md som förklarar projektet, följt av Python-skriptet och en exempelfil som eleverna kan använda.
Instruktioner & Projektbeskrivning
22 sep. 18:08
Verktyg för datakvalitetskontroll
22 sep. 18:08

Öppna
Exempeldata för analys
22 sep. 18:08

Öppna

Dessa filer utgör en komplett och fungerande mikro-app som är direkt anpassad för ARTI-kursens första nivå. Den är praktisk, pedagogisk och uppmuntrar till precis den typ av kritiskt tänkande och diskussion som kursplanen efterfrågar.










Bild

Canvas


Gemini kan göra misstag, inklusive om personer, så dubbelkolla svaren. Din integritet och GeminiÖppnas i ett nytt fönster

Instruktioner & Projektbeskrivning




Skapa

ARTI Mikro-app: CSV Datakvalitetskollen
Detta är en enkel mikro-app designad för ARTI-utbildningens Nivå 1. Syftet är att på ett praktiskt sätt illustrera kursmomentet "Vikten av data och datakvalitet för AI". Appen är ett kommandoradsverktyg som analyserar en CSV-fil och rapporterar grundläggande mått på datakvalitet.

Vad gör appen?
Verktyget tar en CSV-fil som input och gör tre viktiga kontroller:

Saknade Värden: Räknar hur många värden som saknas i varje kolumn.

Duplicerade Rader: Identifierar och räknar antalet kompletta rader som är exakta kopior av varandra.

Etikettbalans (Label Balance): Analyserar en specifik kolumn (t.ex. en resultatkolumn som "Lån beviljat") för att se hur datan är fördelad. Detta är avgörande för att förstå om en AI-modell kan bli partisk (biased).

Resultatet skrivs ut i en strukturerad rapport direkt i terminalen, komplett med en enkel visualisering och en etisk diskussionsfråga för klassrummet.

Koppling till ARTI Nivå 1
Denna app knyter an till flera centrala delar i kursplanen:

Vikten av data, datakvalitet för AI och val av data: Appen ger en konkret upplevelse av vad "dålig" datakvalitet (saknade värden, dubbletter) innebär i praktiken.

Enklare typ av problemlösning med hjälp av AI: Att städa och förstå data är det första, avgörande steget i nästan all AI-problemlösning.

Etiska dilemman med användandet av AI: Diskussionsfrågan om obalanserad data kopplar direkt till hur tekniska problem kan leda till orättvisa och oetiska utfall i samhället.

Praktisk användning: Eleverna får köra ett riktigt Python-skript och se hur kod kan användas för att analysera data.

Hur man använder verktyget
Du behöver ha Python och pandas-biblioteket installerat.

# Installera pandas om du inte redan har det
pip install pandas

Sedan kör du skriptet från din terminal. Du måste ange sökvägen till din CSV-fil och namnet på den kolumn du vill analysera balansen för.

Exempel:

python data_quality_checker.py sample_data.csv --target loan_approved

Detta kommando analyserar filen sample_data.csv och kontrollerar fördelningen av värden i kolumnen loan_approved.

Exempel på utdata
=====================================================
          ARTI DATAKVALITETSKOLLEN v1.0
=====================================================
Analyserar fil: sample_data.csv

--- 1. RAPPORT: SAKNADE VÄRDEN ---
Kolumn 'customer_id'   : 0 saknade värden.
Kolumn 'age'           : 0 saknade värden.
Kolumn 'income'        : 1 saknade värden.
Kolumn 'has_job'       : 0 saknade värden.
Kolumn 'loan_approved' : 0 saknade värden.

--- 2. RAPPORT: DUPLICERADE RADER ---
Hittade 1 duplicerad(e) rad(er).

--- 3. RAPPORT: ETIKETTBALANS FÖR 'loan_approved' ---
Värdefördelning:
Yes: 7 (70.0%)
No : 3 (30.0%)

Visualisering:
Yes | ********************************** (7)
No  | *************** (3)

-----------------------------------------------------
      FÖR DISKUSSION I KLASSRUMMET
-----------------------------------------------------
? Fråga: Vår data innehåller mer än dubbelt så många 'Yes' som 'No' för låneansökningar.
   Hur kan denna obalans leda till att en AI-modell fattar orättvisa beslut i framtiden?
   Vilken grupp av människor riskerar att drabbas?
-----------------------------------------------------

Idéer för vidareutveckling
För elever som vill utmana sig själva:

Hantera fel: Vad händer om filen inte finns? Eller om kolumnen inte finns? Lägg till felhantering med try-except.

Mer avancerad analys: Lägg till fler kontroller, t.ex. att identifiera "outliers" (extrema värden) i numeriska kolumner.

Spara rapport: Modifiera skriptet så att rapporten sparas till en textfil istället för att bara skrivas ut i terminalen.

Interaktivt läge: Bygg ut skriptet så att det frågar användaren vilken fil och kolumn som ska analyseras, istället för att använda kommandoradsargument.




Bygg vidare på dettaSkapa något nytt utifrån detta, som en ljudöversikt, webbapp eller tidslinje

###

# -*- coding: utf-8 -*-
import pandas as pd
import argparse
import os

def generate_text_bar(value, total, max_bar_width=40):
    """Genererar en enkel textbaserad stapel för visualisering."""
    percentage = value / total
    bar_length = int(percentage * max_bar_width)
    return '*' * bar_length

def analyze_data_quality(filepath, target_column):
    """
    Analyserar en CSV-fil för datakvalitet: saknade värden, dubbletter och etikettbalans.
    Skriver ut en rapport till konsolen.
    """
    # Kontrollera om filen existerar
    if not os.path.exists(filepath):
        print(f"FEL: Filen hittades inte på sökvägen: {filepath}")
        return

    try:
        df = pd.read_csv(filepath)
    except Exception as e:
        print(f"FEL: Kunde inte läsa filen. Se till att det är en giltig CSV-fil. Felmeddelande: {e}")
        return

    # Kontrollera om målkolumnen existerar
    if target_column not in df.columns:
        print(f"FEL: Kolumnen '{target_column}' finns inte i filen. Tillgängliga kolumner: {list(df.columns)}")
        return

    # --- Utskrift av rapportens huvud ---
    print("=" * 53)
    print("          ARTI DATAKVALITETSKOLLEN v1.0")
    print("=" * 53)
    print(f"Analyserar fil: {filepath}\n")

    # --- 1. Analys av saknade värden ---
    print("--- 1. RAPPORT: SAKNADE VÄRDEN ---")
    missing_values = df.isnull().sum()
    if missing_values.sum() == 0:
        print("Grattis! Inga saknade värden hittades i datan.")
    else:
        for column, count in missing_values.items():
            if count > 0:
                print(f"Kolumn '{column}'{' ' * (15 - len(column))}: {count} saknade värden.")
    print()

    # --- 2. Analys av duplicerade rader ---
    print("--- 2. RAPPORT: DUPLICERADE RADER ---")
    duplicated_rows = df.duplicated().sum()
    if duplicated_rows > 0:
        print(f"Hittade {duplicated_rows} duplicerad(e) rad(er).")
    else:
        print("Inga duplicerade rader hittades.")
    print()

    # --- 3. Analys av etikettbalans ---
    print(f"--- 3. RAPPORT: ETIKETTBALANS FÖR '{target_column}' ---")
    label_counts = df[target_column].value_counts()
    total_labels = len(df[target_column])

    print("Värdefördelning:")
    for label, count in label_counts.items():
        percentage = (count / total_labels) * 100
        print(f"{label}: {count} ({percentage:.1f}%)")

    print("\nVisualisering:")
    for label, count in label_counts.items():
        bar = generate_text_bar(count, total_labels)
        print(f"{label.ljust(3)} | {bar} ({count})")
    print()
    
    # --- Utskrift av diskussionsfråga ---
    print("-" * 53)
    print("      FÖR DISKUSSION I KLASSRUMMET")
    print("-" * 53)
    print("? Fråga: Vår data innehåller en ojämn fördelning av värden.")
    print("   Hur kan denna obalans leda till att en AI-modell fattar orättvisa beslut i framtiden?")
    print("   Vilken grupp av människor eller situationer riskerar att drabbas av detta?")
    print("-" * 53)


if __name__ == "__main__":
    # Sätt upp argumenthanterare för kommandoraden
    parser = argparse.ArgumentParser(
        description="ARTI Datakvalitetskollen - Ett enkelt verktyg för att analysera datakvalitet i CSV-filer.",
        epilog="Exempel: python data_quality_checker.py sample_data.csv --target loan_approved"
    )
    parser.add_argument("filepath", type=str, help="Sökvägen till CSV-filen som ska analyseras.")
    parser.add_argument("--target", type=str, required=True, help="Namnet på kolumnen att analysera för etikettbalans.")
    
    args = parser.parse_args()
    
    analyze_data_quality(args.filepath, args.target)

###

customer_id,age,income,has_job,loan_approved
1,25,50000,True,Yes
2,30,,True,Yes
3,45,80000,True,No
4,22,30000,False,No
5,50,120000,True,Yes
6,30,65000,True,Yes
1,25,50000,True,Yes
7,65,90000,False,No
8,28,45000,True,Yes
9,35,75000,True,Yes
10,41,82000,True,Yes
