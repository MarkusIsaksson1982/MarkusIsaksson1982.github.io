
Below is a **complete design blueprint** for a React component library that satisfies every requirement you listed.  
It is written as if you were preparing an open-source package that a Swedish gymnasium teacher could install with a single command and start using immediately.

---

## 1. Project Overview

| Feature | Implementation |
|---------|----------------|
| **Dynamic rubric builder** | `<RubricBuilder>` – drag‑and‑drop criteria, configurable levels (e.g., A‑F, 1‑5) |
| **Student self-assessment sliders** | `<SelfAssessmentSlider>` – confidence rating (0‑100) with optional comment |
| **Peer feedback collection** | `<PeerFeedbackForm>` – reusable form, supports multiple reviewers |
| **Portfolio evidence tracker** | `<PortfolioTracker>` – file upload / link input, automatic tagging |
| **Offline functionality** | Data stored in IndexedDB (via `idb` or `localforage`) and synced when online |
| **Export to Excel / Google Sheets** | Utilises `xlsx` (SheetJS) for Excel; Google Sheets export via Google API client |
| **WCAG 2.1 AA accessibility** | Semantic HTML, ARIA attributes, keyboard navigation, high-contrast mode |
| **Multilingual (Swedish / English)** | `i18next` + `react-i18next` with lazy-loaded namespaces |
| **Customizable themes** | Styled with `styled-components` + ThemeProvider; default light/dark + school brand palette |
| **Package manager** | Published on npm (`@gymnasia/rubric-ui`) with TypeScript typings |
| **Build system** | Rollup (or Vite) for bundling, Babel for transpilation, PostCSS for CSS |

---

## 2. Installation & Setup

```bash
# Using npm
npm install @gymnasia/rubric-ui

# Or Yarn
yarn add @gymnasia/rubric-ui
```

### Peer dependencies (install once)

```bash
npm install react react-dom styled-components i18next react-i18next xlsx
```

> **Note:** The library ships with TypeScript definitions (`.d.ts`) so you get autocompletion out of the box.

---

## 3. Core API Overview

All components share a **common theme provider** and **i18n provider**. Wrap your app once:

```tsx
// App.tsx
import { ThemeProvider, RubricUITheme } from '@gymnasia/rubric-ui';
import { I18nextProvider } from 'react-i18next';
import i18n from './i18n'; // configure as shown later

const theme: RubricUITheme = {
  primary: '#005B7F',      // school brand color
  secondary: '#FFC72C',
  background: '#F7F9FC',
  surface: '#FFFFFF',
  error: '#D32F2F',
  success: '#388E3C',
  fontFamily: '"Arial", "Helvetica", sans-serif',
};

export const App = () => (
  <ThemeProvider theme={theme}>
    <I18nextProvider i18n={i18n}>
      <YourDashboard />
    </I18nextProvider>
  </ThemeProvider>
);
```

### 3.1. `<RubricBuilder>`

```tsx
import { RubricBuilder, RubricCriterion, RubricLevel } from '@gymnasia/rubric-ui';

const initialRubric: RubricCriterion[] = [
  {
    id: 'c1',
    title: 'Argumentation',
    description: 'How well the student argues a point.',
    levels: [
      { id: 'l1', label: 'A', score: 5, description: 'Excellent' },
      { id: 'l2', label: 'B', score: 4, description: 'Good' },
      { id: 'l3', label: 'C', score: 3, description: 'Sufficient' },
      { id: 'l4', label: 'D', score: 2, description: 'Insufficient' },
      { id: 'l5', label: 'E', score: 1, description: 'Poor' },
    ],
  },
  // ... more criteria
];

export const TeacherRubric = () => {
  const [rubric, setRubric] = useState(initialRubric);

  const handleSave = (updated: RubricCriterion[]) => {
    // persist to server or IndexedDB
    setRubric(updated);
  };

  return (
    <RubricBuilder
      rubric={rubric}
      onChange={handleSave}
      enableDragDrop
      showScoreColumn
      locale="sv" // or 'en'
    />
  );
};
```

**Props**

| Prop | Type | Description |
|------|------|-------------|
| `rubric` | `RubricCriterion[]` | Array of criteria with nested levels |
| `onChange` | `(rubric: RubricCriterion[]) => void` | Fires after any edit (add/remove/sort) |
| `enableDragDrop` | `boolean` | Allows reordering via `react-beautiful-dnd` |
| `showScoreColumn` | `boolean` | Shows numeric score per level |
| `locale` | `'sv' | 'en'` | Determines UI labels (translated via i18n) |
| `maxLevels` | `number` (default 5) | Limits number of levels per criterion |
| `readOnly` | `boolean` | Disables editing (useful for student view) |

### 3.2. `<SelfAssessmentSlider>`

```tsx
import { SelfAssessmentSlider } from '@gymnasia/rubric-ui';

export const StudentSelfAssessment = () => {
  const [value, setValue] = useState(50);
  const [comment, setComment] = useState('');

  const handleSubmit = () => {
    // store locally or sync
    console.log({ value, comment });
  };

  return (
    <SelfAssessmentSlider
      label="Confidence in your argumentation"
      min={0}
      max={100}
      step={5}
      value={value}
      onChange={setValue}
      onCommentChange={setComment}
      commentPlaceholder="Explain your rating..."
      onSubmit={handleSubmit}
      locale="sv"
    />
  );
};
```

**Key features**

- Accessible slider (`role="slider"` with ARIA attributes)
- Keyboard increments (arrow keys)
- Optional comment box
- Submit button disabled until a rating is chosen

### 3.3. `<PeerFeedbackForm>`

```tsx
import { PeerFeedbackForm, FeedbackItem } from '@gymnasia/rubric-ui';

export const PeerReview = ({ studentId }: { studentId: string }) => {
  const [feedbacks, setFeedbacks] = useState<FeedbackItem[]>([]);

  const handleAdd = (item: FeedbackItem) => {
    setFeedbacks(prev => [...prev, item]);
  };

  const handleExport = () => {
    // use library's export helper
    import('@gymnasia/rubric-ui').then(({ exportToExcel }) => {
      exportToExcel(feedbacks, `peer-feedback-${studentId}.xlsx`);
    });
  };

  return (
    <div>
      <PeerFeedbackForm
        onSubmit={handleAdd}
        criteria={['Clarity', 'Argument strength', 'Evidence use']}
        locale="en"
      />
      <button onClick={handleExport}>Export all feedback</button>
    </div>
  );
};
```

**Props**

| Prop | Type | Description |
|------|------|-------------|
| `onSubmit` | `(item: FeedbackItem) => void` | Called when a new feedback entry is saved |
| `criteria` | `string[]` | List of aspects the reviewer must comment on |
| `maxLength` | `number` (default 500) | Character limit for each comment |
| `readOnly` | `boolean` | Display only mode (e.g., after deadline) |

### 3.4. `<PortfolioTracker>`

```tsx
import { PortfolioTracker, EvidenceItem } from '@gymnasia/rubric-ui';

export const StudentPortfolio = () => {
  const [evidence, setEvidence] = useState<EvidenceItem[]>([]);

  const handleAdd = (item: EvidenceItem) => {
    setEvidence(prev => [...prev, item]);
  };

  return (
    <PortfolioTracker
      evidence={evidence}
      onAdd={handleAdd}
      allowedFileTypes={['application/pdf', 'image/*']}
      maxFileSizeMB={20}
      locale="sv"
    />
  );
};
```

**Features**

- Drag-and-drop file upload (with fallback to regular `<input>`)
- Ability to add URLs (e.g., links to digital artefacts)
- Automatic tagging based on rubric criteria (optional)
- Offline storage: files are saved to IndexedDB and later synced

---

## 4. Internationalization (i18n)

The library uses `react-i18next`. You can add your own translation files or rely on the bundled Swedish/English dictionaries.

```tsx
// i18n.ts (in the host app)
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import { svTranslation, enTranslation } from '@gymnasia/rubric-ui/locales';

i18n
  .use(initReactI18next)
  .init({
    resources: {
      sv: { translation: svTranslation },
      en: { translation: enTranslation },
    },
    lng: 'sv', // default language
    fallbackLng: 'en',
    interpolation: { escapeValue: false },
  });

export default i18n;
```

All UI strings are wrapped with `t('key')` internally, so switching language at runtime updates every component automatically.

---

## 5. Theming & Styling

The library ships with a **default theme** (light) and a **dark variant**. You can extend or replace any token.

```tsx
import { createGlobalStyle, ThemeProvider } from 'styled-components';
import { RubricUITheme } from '@gymnasia/rubric-ui';

const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    font-family: ${(props) => props.theme.fontFamily};
    background: ${(props) => props.theme.background};
    color: ${(props) => props.theme.onBackground};
  }
`;

const customTheme: RubricUITheme = {
  primary: '#0A74DA',
  secondary: '#F2C94C',
  background: '#FFFFFF',
  surface: '#F5F5F5',
  error: '#B00020',
  success: '#2E7D32',
  fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
  // Optional overrides for specific components:
  rubric: {
    headerBg: '#E0E0E0',
    rowHover: '#FAFAFA',
  },
};

export const DemoApp = () => (
  <ThemeProvider theme={customTheme}>
    <GlobalStyle />
    {/* Your app content */}
  </ThemeProvider>
);
```

All components consume the theme via `styled-components`, making it trivial to match a school's brand guidelines (logo colors, typography, etc.).

---

## 6. Offline Support

### 6.1. Data Persistence

- **IndexedDB** (via `idb` package) stores:
  - Rubric definitions
  - Self-assessment responses
  - Peer feedback entries
  - Portfolio evidence metadata (file names, sizes, timestamps)

```tsx
import { openDB } from 'idb';

const dbPromise = openDB('gymnasia-rubric', 1, {
  upgrade(db) {
    db.createObjectStore('rubrics', { keyPath: 'id' });
    db.createObjectStore('selfAssessments', { keyPath: 'id' });
    db.createObjectStore('peerFeedback', { keyPath: 'id' });
    db.createObjectStore('portfolio', { keyPath: 'id' });
  },
});
```

Utility functions are exported for convenience:

```tsx
import { saveRubric, getRubric, saveEvidence } from '@gymnasia/rubric-ui/offline';
```

### 6.2. Sync Logic

When the app detects an internet connection (`navigator.onLine`), a background service worker (optional) can:

1. Pull the latest rubric definitions from the server (if any)
2. Push locally stored assessments/feedback to the central API
3. Resolve conflicts using timestamps (last-write-wins)

A minimal Service Worker template is included in the library's `static` folder.

---

## 7. Exporting Data

### 7.1. Excel (XLSX)

```tsx
import { exportToExcel } from '@gymnasia/rubric-ui';

const data = [
  { studentId: 'S001', criterion: 'Argumentation', level: 'A', score: 5, comment: 'Great!' },
  // ...
];

exportToExcel(data, 'assessment-report.xlsx');
```

The helper uses `xlsx` to generate a workbook with separate sheets for each rubric criterion.

### 7.2. Google Sheets

1. **Prerequisite** – Set up a Google Cloud project with the Sheets API enabled and download a `client_secret.json`.
2. Use the provided async helper:

```tsx
import { exportToGoogleSheets } from '@gymnasia/rubric-ui';

await exportToGoogleSheets(data, {
  spreadsheetId: 'YOUR_SPREADSHEET_ID',
  apiKey: 'YOUR_API_KEY', // optional, can be omitted if using OAuth flow
});
```

The library bundles a tiny OAuth2 flow (via `gapi-script`) that works in browsers.

---

## 8. Accessibility (WCAG 2.1 AA)

| Feature | Implementation |
|---------|----------------|
| **Semantic HTML** | All components use `<section>`, `<article>`, `<label>`, `<fieldset>` etc. |
| **ARIA** | Slider role, aria-valuenow, aria-valuetext; form error messages use `aria-live="assertive"` |
| **Keyboard navigation** | Drag-and-drop handles are reachable via keyboard (Space/Enter to move) |
| **Focus management** | Modal dialogs trap focus; after closing focus returns to the trigger |
| **Contrast** | Default theme meets 4.5:1 contrast ratio; custom themes validated with `polished` utils |
| **Screen reader friendly** | All UI text exposed via `aria-label` and visible text; error messages have `role="alert"` |
| **Resizable text** | No fixed pixel sizes; rem units used throughout |
| **Skip to content** | Library provides a `SkipNavLink` component for easy navigation |

Developers can enable a high-contrast mode by toggling a prop:

```tsx
<RubricBuilder highContrast={true} ... />
```

---

## 9. Project Structure (Inside the library)

```
src/
|-- components/
|   |-- RubricBuilder/
|   |   |-- RubricBuilder.tsx
|   |   |-- RubricCriterionRow.tsx
|   |   |-- LevelCell.tsx
|   |-- SelfAssessmentSlider/
|   |-- PeerFeedbackForm/
|   |-- PortfolioTracker/
|   |-- shared/
|       |-- DragDropContext.tsx
|       |-- Slider.tsx
|       |-- FileUploader.tsx
|-- hooks/
|   |-- useOfflineStore.ts
|   |-- useExport.ts
|-- utils/
|   |-- excel.ts
|   |-- googleSheets.ts
|   |-- i18n.ts
|-- locales/
|   |-- en.json
|   |-- sv.json
|-- theme/
|   |-- theme.ts
|   |-- globalStyle.ts
|-- index.ts   // re-exports
```

All components are **pure** and accept `className`/`style` for further customization.

---

## 10. Example Minimal App (Putting it all together)

```tsx
// DemoApp.tsx
import React, { useState, useEffect } from 'react';
import {
  RubricBuilder,
  SelfAssessmentSlider,
  PeerFeedbackForm,
  PortfolioTracker,
  exportToExcel,
  ThemeProvider,
  RubricUITheme,
} from '@gymnasia/rubric-ui';
import { I18nextProvider } from 'react-i18next';
import i18n from './i18n';
import { openDB } from 'idb';

const demoTheme: RubricUITheme = {
  primary: '#00695C',
  secondary: '#EF6C00',
  background: '#F1F8E9',
  surface: '#FFFFFF',
  error: '#C62828',
  success: '#2E7D32',
  fontFamily: '"Open Sans", sans-serif',
};

export const DemoApp = () => {
  const [rubric, setRubric] = useState([]);
  const [selfAssessments, setSelfAssessments] = useState([]);
  const [peerFeedback, setPeerFeedback] = useState([]);
  const [portfolio, setPortfolio] = useState([]);

  // Load data from IndexedDB on mount
  useEffect(() => {
    const load = async () => {
      const db = await openDB('gymnasia-rubric', 1);
      const storedRubric = await db.getAll('rubrics');
      const storedSelf = await db.getAll('selfAssessments');
      const storedPeer = await db.getAll('peerFeedback');
      const storedPort = await db.getAll('portfolio');

      setRubric(storedRubric);
      setSelfAssessments(storedSelf);
      setPeerFeedback(storedPeer);
      setPortfolio(storedPort);
    };
    load();
  }, []);

  const handleExportAll = () => {
    const allData = [
      ...selfAssessments.map((a) => ({ type: 'self', ...a })),
      ...peerFeedback.map((p) => ({ type: 'peer', ...p })),
    ];
    exportToExcel(allData, 'full-assessment-report.xlsx');
  };

  return (
    <ThemeProvider theme={demoTheme}>
      <I18nextProvider i18n={i18n}>
        <div style={{ padding: '2rem' 
