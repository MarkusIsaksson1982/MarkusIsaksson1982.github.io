```python
import pdfplumber
import json
import csv
import os
import argparse
import re

def detect_language(full_text):
    lower_text = full_text.lower()
    if "eleven" in lower_text:
        return "sw"
    elif "pupil" in lower_text:
        return "en"
    else:
        return "sw"  # Default to Swedish

def main():
    parser = argparse.ArgumentParser(description="Extract and parse Swedish curriculum documents.")
    parser.add_argument("pdf_path", help="Path to the PDF file.")
    parser.add_argument("--config", default="config.json", help="Path to the configuration JSON file.")
    parser.add_argument("--output_dir", default="output", help="Output directory for results.")
    parser.add_argument("--language", choices=["sw", "en"], help="Language of the document (sw for Swedish, en for English). If not specified, auto-detect.")
    args = parser.parse_args()

    if not os.path.exists(args.output_dir):
        os.makedirs(args.output_dir)

    try:
        with open(args.config, "r", encoding="utf-8") as f:
            config = json.load(f)
    except FileNotFoundError:
        print(f"Config file '{args.config}' not found.")
        return
    except json.JSONDecodeError:
        print(f"Error decoding JSON in config file '{args.config}'.")
        return

    subjects = config.get("subjects", {})

    data = []

    try:
        with pdfplumber.open(args.pdf_path) as pdf:
            full_text = ""
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    full_text += page_text + "\n"

        if not full_text:
            raise ValueError("No text extracted from PDF.")

        language = args.language or detect_language(full_text)

        # Find kunskapskrav sections
        if language == "sw":
            section_pattern = r"(Kunskapskrav för betyget (\w) vid slutet av årskurs (\d))[^\n]*\n(.*?)(?=(Kunskapskrav för betyget|$))"
            descriptor_pattern = r"Eleven [^.]+\."
        else:
            section_pattern = r"(Knowledge requirements for grade (\w) at the end of year (\d))[^\n]*\n(.*?)(?=(Knowledge requirements for grade|$))"
            descriptor_pattern = r"(The pupil|Pupils) [^.]+\."

        matches = re.findall(section_pattern, full_text, re.DOTALL | re.IGNORECASE)

        for heading, level, year, text in matches:
            level = level.upper()
            if level not in ["E", "C", "A"]:
                continue  # Skip D, B, F
            descriptors = re.findall(descriptor_pattern, text, re.IGNORECASE)
            for desc in descriptors:
                if isinstance(desc, tuple):
                    desc = " ".join(desc)  # In case of groups
                desc = desc.strip()
                if not desc:
                    continue
                bridges = []
                for sub, keywords in subjects.items():
                    if any(kw.lower() in desc.lower() for kw in keywords):
                        bridges.append(sub)
                data.append({
                    "year": year,
                    "level": level,
                    "descriptor": desc,
                    "bridges": bridges
                })

        if not data:
            raise ValueError("No kunskapskrav sections or descriptors found in the PDF.")

    except Exception as e:
        print(f"Error processing PDF: {e}")
        return

    # Output JSON
    json_path = os.path.join(args.output_dir, "data.json")
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

    # Output CSV
    csv_path = os.path.join(args.output_dir, "data.csv")
    with open(csv_path, "w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["year", "level", "descriptor", "bridges"])
        writer.writeheader()
        for item in data:
            row = item.copy()
            row["bridges"] = ",".join(row["bridges"])
            writer.writerow(row)

    # Output Markdown
    md_path = os.path.join(args.output_dir, "data.md")
    with open(md_path, "w", encoding="utf-8") as f:
        f.write("# Extracted Kunskapskrav\n\n")
        current_year = None
        current_level = None
        for item in sorted(data, key=lambda x: (x["year"], x["level"])):
            if item["year"] != current_year:
                current_year = item["year"]
                f.write(f"## Year {current_year}\n\n")
            if item["level"] != current_level:
                current_level = item["level"]
                f.write(f"### Level {current_level}\n\n")
            f.write(f"- **Descriptor:** {item['descriptor']}\n")
            if item["bridges"]:
                f.write(f"  **Bridges:** {', '.join(item['bridges'])}\n")
            f.write("\n")

    print(f"Outputs generated in {args.output_dir}: data.json, data.csv, data.md")

if __name__ == "__main__":
    main()
```
